{% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}
 
    {# Set Namespace Variables #}
    {% set nsVariables = namespace(taskWhenRun="") %}
    {% set nsVariables = namespace(partition="") %}
    {% set nsVariables = namespace(orderBy="") %}
    {% set nsVariables = namespace(rowNumber="") %}
    {% set nsVariables = namespace(tableKey=[]) %}
    {% set nsVariables = namespace(sortKey=[]) %}
    {% set nsVariables = namespace(tableKeySort=[]) %}
    {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}
 
   
 
    {# Source Object Location and Name #}
    {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
    {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
    
    {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
    {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
    {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
    {% set nsVariables = namespace(poll="WHEN ") %}
 
     
 
    {# Target Stream Location and Name #}
    {% set streamTargetLocationName = desiredState.node.location.name %}
    {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
    {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
    {% set streamName = desiredState.node.name + '_STREAM' %}
    {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
    {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}
 
    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %}
    {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %}
    {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
    {% set targetTableName = desiredState.node.name %}
 
    {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
    {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
    {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
    {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
    {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
    {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}
 
 
    {% if desiredState.config.clusterKey == true %}
            {% if desiredState.config.clusterKeyExpressions == true %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}
 
                {%- set nsVariables = namespace(clusterValues=[]) %}
 
                {% for r in column %}
                    {% if expression[loop.index0] == "" %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                    {% else %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}
 
                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
 
            {% else %}
 
                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}
 
                {%- set nsVariables = namespace(clusterValues=[]) %}
 
                {% for r in column %}
                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                {% endfor %}
 
                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
 
            {% endif %}
        {% endif %}
 
    {# Merge partition by and order by #}
    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
 
    {% for i in desiredState.config.partitionBy.get('items') %}
        {%- if loop.first -%}
            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
        {% else %}
            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
        {%- endif -%}
 
        {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}
 
    {% endfor %}
 
    {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
        {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
        {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
        {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
        {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}
        {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
        {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
    {% else %}
        {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
        {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
        {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
        {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
        {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
        {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
        {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}
 
        {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
        {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
    {% endif %}
 
    {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
 
    {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}
 
    {# Stream Type #}
    {% if desiredState.config.sourceType == 'Table' %}
        {% set streamType = 'TABLE' %}
        {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
    {% else %}
        {% set streamType = 'VIEW' %}
        {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
    {% endif %}
 
    {# DML Identifier Quoting #}
    {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
        {% set insertValue = desiredState.config.dmlInsert %}
        {% set deleteValue = desiredState.config.dmlDelete %}
        {% if desiredState.config.capUpdate == true %}
            {% set updateValue = desiredState.config.dmlUpdate %}
        {% endif %}
    {% else %}
        {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
        {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
        {% if desiredState.config.capUpdate == true %}
            {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
        {% endif %}
    {% endif %}
 
    {# Stream Append Behavior #}
    {% if streamType == 'TABLE' or streamType == 'VIEW' %}
            {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
            {% set changesClauseMode = 'CHANGES(information => append_only)' %}
    {% else %}
        {% set streamAppendMode = '' %}
    {% endif %}
 
    {# Stream Initial Row Behavior #}
    {% if streamType == 'TABLE' or streamType == 'VIEW' %}
        {% if desiredState.config.initialRows == true %}
            {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
        {% else %}
            {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
        {% endif %}
    {% else %}
        {% set streamInitialRowsMode = '' %}
    {% endif %}
 
    {# Stream Insert Only Behavior #}
    {% if streamType == 'EXTERNAL TABLE' %}
        {% if desiredState.config.insertOnly == true %}
            {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
        {% else %}
            {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
        {% endif %}
    {% else %}
        {% set streamInsertOnlyMode = '' %}
    {% endif %}
    {# Hybrid View Info #}
    {# View created in same schema as Target Table #}
    {% set targetHybridViewDatabase = targetTableDatabase %}
    {% set targetHybridViewSchema = targetTableSchema %}
    {% set targetHybridViewName = desiredState.node.name  %}
    {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
 
    {# Task Info #}
    {% set taskName = desiredState.node.name + '_TASK'  %}
    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%}
 
    {# Task Type #}
    {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%}
        {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%}
    {%- else -%}
        {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%}
    {%- endif -%}
 
    {# Schedule Type #}
    {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%}
        {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%}
    {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
        {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" %}
    {%- else -%}
        {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
        {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}
 
        {%- for p in predecessorTasks -%}
            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
            {%- if not loop.last -%}
                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
            {%- endif %}
        {% endfor %}    
    {%- endif -%}
 
   
 
 
    {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}
        {{ stage('Create Stream', true, "sql", "alter") }}
        CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
            ON {{ streamType }} {{ streamSourceObjectName }}
            {{ streamAppendMode }}
            {{ streamInitialRowsMode }}
            {{ streamInsertOnlyMode }}
 
    {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create If Not Exists'%}
        {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
        CREATE STREAM IF NOT EXISTS {{ fullyQualifiedStreamName }}
            ON {{ streamType }} {{ streamSourceObjectName }}
            {{ streamAppendMode }}
            {{ streamInitialRowsMode }}
            {{ streamInsertOnlyMode }}
 
    {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create At Existing Stream'%}
        {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
        CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
            ON {{ streamType }} {{ streamSourceObjectName }}
            AT(STREAM => '{{ fullyQualifiedStreamName }}');
 
    {% else %}
        {{ stage('Unknown state.', true, "sql", "alter") }}
        select 1 = 0
    {% endif %}
 
       
   
       
    {{ stage('Create Target Table', true, "sql", "alter") }}
    CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
        (
        {%- for col in desiredState.columns %}
                "{{ col.name }}" {{ col.dataType }}
                {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
        )
        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
        {% if desiredState.config.clusterKey == true %}
            {{ stage('Apply Table Clustering', true, "sql", "create") }}
            ALTER TABLE {{fullyQualifiedTargetTableName }} {{ nsVariables.finalClusterKey }}
 
            {{ stage('Resume Recluster Table', true, "sql", "create") }}
            ALTER TABLE {{ fullyQualifiedTargetTableName }} RESUME RECLUSTER
        {% endif %}
 
 
 
 
    {% if desiredState.config.initialRows == true %}
       
        {{ stage('Target Table Initial Load') }}
        INSERT INTO {{ fullyQualifiedTargetTableName }}
        SELECT
        {%- for col in desiredState.columns %}
            "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
        FROM (SELECT {%- for col in desiredState.columns %}
                        {% if col.name == targetTableMergeUpdateColumn %}
                            {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                        {% else %}
                            "{{ col.name }}" as "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    {% if desiredState.config.softDeleteFlag == false %}
                        ,case when {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} then 0 else 1 end as load_flag
                    {% endif %}
            FROM {{ fullyQualifiedStreamName }}
            QUALIFY {{ nsVariables.rowNumber }} = 1)
            {% if desiredState.config.softDeleteFlag == false %}
                WHERE load_flag = 1
            {% endif %}
    {% endif %}
    {{ stage('Create Hybrid View') }}
    CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
        {%- for col in desiredState.columns %}
            "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %} ) AS
 
    {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
    WITH delta AS
    (
    SELECT {%- for col in desiredState.columns %}
                {% if col.name == targetTableMergeUpdateColumn %}
                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} AS "{{ col.name }}"
                {% else %}
                    "{{ col.name }}" AS "{{ col.name }}"
                {% endif %}
                {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM {{ fullyQualifiedSourceTableName }}
    {{ changesClauseMode }}
    {{ changesClauseAt }}
    QUALIFY {{ nsVariables.rowNumber }} = 1)
 
    SELECT {%- for col in desiredState.columns %}
                "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM {{ fullyQualifiedTargetTableName }} target
    WHERE NOT EXISTS (SELECT 1
                    FROM delta delta_table
                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                target.{{ col }} = delta_table.{{ col }}
                                {% if not loop.last -%}AND {% endif %}
                            {%- endfor %})
    UNION ALL
    SELECT {%- for col in desiredState.columns %}
                "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM delta delta_table
 
{% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %}
    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
    WITH delta AS
    (
    SELECT {%- for col in desiredState.columns %}
                {% if col.name == targetTableMergeUpdateColumn %}
                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} AS "{{ col.name }}"
                {% else %}
                    "{{ col.name }}" AS "{{ col.name }}"
                {% endif %}
                ,
        {%- endfor %}
                CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
    FROM {{ fullyQualifiedSourceTableName }}
    {{ changesClauseMode }}
    {{ changesClauseAt }}
    QUALIFY {{ nsVariables.rowNumber }} = 1)
 
    SELECT {%- for col in desiredState.columns %}
                "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM {{ fullyQualifiedTargetTableName }} target
    WHERE NOT EXISTS (SELECT 1
                    FROM delta delta_table
                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                target.{{ col }} = delta_table.{{ col }}
                                {% if not loop.last -%}AND {% endif %}
                            {%- endfor %})
    UNION ALL
    SELECT {%- for col in desiredState.columns %}
                "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM delta delta_table
    WHERE LOAD_FLAG = 1
 
 
    {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %}
        /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
        WITH
        initial_data AS (
        SELECT {%- for col in desiredState.columns %}
                    {% if col.name == targetTableMergeUpdateColumn %}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% else %}
                        "{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ fullyQualifiedSourceTableName }}
        {{ changesClauseMode }}
        {{ changesClauseAt }}
        WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
        QUALIFY {{ nsVariables.rowNumber }} = 1),
 
        soft_deleted_data AS (
        SELECT {%- for col in desiredState.columns %}
                    {% if col.name == targetTableMergeUpdateColumn %}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% else %}
                        "{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ fullyQualifiedSourceTableName }}
        {{ changesClauseMode }}
        {{ changesClauseAt }}
        WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
        QUALIFY {{ nsVariables.rowNumber }} = 1),
 
        ods_data as (
        SELECT {%- for col in desiredState.columns %}
                    {% if col.name == targetTableMergeUpdateColumn %}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name in nsVariables.orderBy  %}
                        soft_deleted_data."{{ col.name }}" as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn  %}
                        {{ deleteValue }} as "{{ col.name }}"
                    {% else %}
                        initial_data."{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} initial_data
        INNER JOIN (
                SELECT {%- for col in nsVariables.tableKeySort %}
                                "{{ col }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) soft_deleted_data
        ON
        {% for col in nsVariables.tableKey %}
            initial_data."{{col}}" = soft_deleted_data."{{col}}"
            {%- if not loop.last -%} AND {% endif %}
            {%- if loop.last -%} ) {% endif %}
        {% endfor %}
 
        SELECT {%- for col in desiredState.columns %}
                    {% if col.name == targetTableMergeUpdateColumn %}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name in nsVariables.orderBy  %}
                        coalesce(soft_deleted_data."{{ col.name }}", initial_data."{{ col.name }}") as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn  %}
                        coalesce(soft_deleted_data."{{ col.name }}", initial_data."{{ col.name }}") as "{{ col.name }}"
                    {% else %}
                        initial_data."{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM initial_data
        LEFT OUTER JOIN soft_deleted_data
        ON
            {%- for col in nsVariables.tableKey %}
                    initial_data."{{ col }}" = soft_deleted_data."{{ col }}" AND
            {%- endfor %}
            {{ nsVariables.hybridMergeSortFilter | replace('alias','soft_deleted_data') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','initial_data') }}
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM ods_data
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} soft_deleted_data
        WHERE NOT EXISTS (
            SELECT 1
            FROM {{ fullyQualifiedSourceTableName }}
            {{ changesClauseMode }}
            {{ changesClauseAt }} initial_data
            WHERE
            {%- for col in nsVariables.tableKey %}
                    initial_data."{{ col }}" = soft_deleted_data."{{ col }}"
                {%- if not loop.last -%} AND {% endif %}
            {%- endfor %})
 
    {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %}
        /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
        WITH
  active_records AS (
    SELECT {%- for col in desiredState.columns %}
                {% if col.name == targetTableMergeUpdateColumn %}
                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                {% else %}
                    "{{ col.name }}" as "{{ col.name }}"
                {% endif %}
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
    FROM {{ fullyQualifiedSourceTableName }}
    {{ changesClauseMode }}
    {{ changesClauseAt }}
    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
    QUALIFY {{ nsVariables.rowNumber }} = 1),
 
  drecords AS (
    SELECT {%- for col in desiredState.columns %}
                {% if col.name == targetTableMergeUpdateColumn %}
                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                {% else %}
                    "{{ col.name }}" as "{{ col.name }}"
                {% endif %}
                {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM {{ fullyQualifiedSourceTableName }}
    {{ changesClauseMode }}
    {{ changesClauseAt }}
    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
    QUALIFY {{ nsVariables.rowNumber }} = 1),
 
  ODS_DATA AS (
    SELECT {%- for col in desiredState.columns %}
                {% if col.name == targetTableMergeUpdateColumn %}
                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                {% elif col.name in nsVariables.orderBy  %}
                    drecords."{{ col.name }}" as "{{ col.name }}"
                {% elif col.name == targetTableDmlIdentifierColumn  %}
                    {{ deleteValue }} as "{{ col.name }}"
                {% else %}
                    active_records."{{ col.name }}" as "{{ col.name }}"
                {% endif %}
                {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM {{ fullyQualifiedTargetTableName }} active_records
    INNER JOIN (
            SELECT {%- for col in nsVariables.tableKeySort %}
                            "{{ col }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) drecords
    ON
    {% for col in nsVariables.tableKey %}
        active_records."{{col}}" = drecords."{{col}}"
        {%- if not loop.last -%} AND {% endif %}
        {%- if loop.last -%} ) {% endif %}
    {% endfor %}
 
    SELECT
    {%- for col in desiredState.columns %}
            "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
    {%- endfor %}
    FROM (
        SELECT {%- for col in desiredState.columns %}
                    {% if col.name == targetTableMergeUpdateColumn %}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name in nsVariables.orderBy  %}
                        coalesce(drecords."{{ col.name }}", active_records."{{ col.name }}") as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn  %}
                        coalesce(drecords."{{ col.name }}", active_records."{{ col.name }}") as "{{ col.name }}"
                    {% else %}
                        active_records."{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    ,
            {%- endfor %}
            case when coalesce(drecords.{{ targetTableDmlIdentifierColumnQuotes }}, active_records.{{ targetTableDmlIdentifierColumnQuotes }}) = {{ deleteValue }} then 0 else 1 end as load_flag
        FROM active_records
        LEFT OUTER JOIN drecords
        ON
            {%- for col in nsVariables.tableKey %}
                    active_records."{{ col }}" = drecords."{{ col }}" AND
            {%- endfor %}
            {{ nsVariables.hybridMergeSortFilter | replace('alias','drecords') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','active_records') }}
        )
        WHERE load_flag = 1
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM ODS_DATA
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} drecords
        WHERE NOT EXISTS (
            SELECT 1
            FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }} active_records
            WHERE
            {%- for col in nsVariables.tableKey %}
                    active_records."{{ col }}" = drecords."{{ col }}"
                {%- if not loop.last -%} AND {% endif %}
            {%- endfor %})
 
 
    {% endif %}
   
{% if desiredState.config.devMode == false %}
 
     
   
 
    {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%}
        {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%}
        {{ stage('Suspend Root Task', true, "sql") }}
        ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
    {%- endif -%}
 
    {% if desiredState.config.flagSrcStream == true %}
        {%- if nsVariables.poll == 'WHEN ' -%}
            {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA (\'' + fullyQualifiedStreamName + '\') '  %}
            {%- endif -%}
    {% endif -%}  
   
    {{ stage('Create Task', true, "sql", "alter") }}
    CREATE OR REPLACE TASK
                {{ fullyQualifiedTaskName }}
                {{ taskType}}
                {{ nsVariables.taskWhenRun }}
                {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
               
    AS
    MERGE INTO {{ fullyQualifiedTargetTableName }} target_table
    USING (SELECT
    {%- for col in desiredState.columns %}
                {% if col.name == targetTableMergeUpdateColumn %}
                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                {% else %}
                    "{{ col.name }}" as "{{ col.name }}"
                {% endif %}
                {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM {{ fullyQualifiedStreamName }}
    {{ whereStreamFilter }}
    QUALIFY {{ nsVariables.rowNumber }} = 1) source_table
    ON
    {% for col in nsVariables.tableKey %}
        target_table."{{col}}" = source_table."{{col}}"
        {%- if not loop.last -%} AND {% endif %}
    {% endfor %}
 
    WHEN NOT MATCHED and source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
        {% for col in desiredState.columns %}
            target_table."{{ col.name }}"
            {% if not loop.last %}, {% endif -%}
        {%- endfor -%}
        )
    VALUES (
        {% for col in desiredState.columns %}
            source_table."{{ col.name }}"
            {% if not loop.last %}, {%- endif -%}
        {%- endfor -%}
        )
    {% if desiredState.config.capUpdate == true %}
        WHEN NOT MATCHED and source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
            {% for col in desiredState.columns %}
                target_table."{{ col.name }}"
                {% if not loop.last %}, {% endif -%}
            {%- endfor -%}
            )
        VALUES (
            {% for col in desiredState.columns %}
                source_table."{{ col.name }}"
                {% if not loop.last %}, {%- endif -%}
            {%- endfor -%}
            )
    {% endif %}
    WHEN NOT MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
        {% for col in desiredState.columns %}
            target_table."{{ col.name }}"
            {% if not loop.last %}, {% endif -%}
        {%- endfor -%}
        )
    VALUES (
        {% for col in desiredState.columns %}
            source_table."{{ col.name }}"
            {% if not loop.last %}, {%- endif -%}
        {%- endfor -%}
        )
    {% if desiredState.config.capUpdate == true %}
        /* Update DML value selected */
        WHEN MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
            {% for col in targetTableColumnNamesUpdate %}
                target_table."{{ col }}" = source_table."{{ col }}"
                {% if not loop.last %}, {% endif -%}
            {%- endfor -%}
    {% endif %}
    WHEN MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
        {% for col in targetTableColumnNamesUpdate %}
            target_table."{{ col }}" = source_table."{{ col }}"
            {% if not loop.last %}, {% endif -%}
        {%- endfor -%}
    {% if desiredState.config.softDeleteFlag == true %}
        /* Soft Delete */
        WHEN MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
        THEN UPDATE SET
            {% for col in (targetTableColumnNamesUpdate) %}
                {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                    target_table."{{ col }}" = source_table."{{ col }}"
                    {% if not loop.last %}, {% endif -%}
                {% endif %}
            {%- endfor -%}
    {% else %}
        /* Hard Delete */
        WHEN MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
        THEN DELETE
    {% endif %}
 
    {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%}
        {{ stage('Resume Task', true, "sql") }}
        ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
    {%- endif -%}
{%- endif -%}
 
{% elif currentState != undefined and desiredState == undefined %}
 
    {# Target Stream Location and Name #}
    {% set streamTargetLocationName = currentState.node.location.name %}
    {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
    {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
    {% set streamName = currentState.node.name + '_STREAM' %}
    {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
 
    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %}
    {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %}
    {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
    {% set targetTableName = currentState.node.name %}
 
    {# Hybrid View Info #}
    {# View created in same schema as Target Table #}
    {% set targetHybridViewDatabase = targetTableDatabase %}
    {% set targetHybridViewSchema = targetTableSchema %}
    {% set targetHybridViewName = currentState.node.name  %}
    {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
 
    {# Task Info #}
    {% set taskName = currentState.node.name + '_TASK'  %}
    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%}
    {%- set fullyQualifiedRootTaskName1 = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"' -%}
 
    {{ stage('Drop Stream') }}
    DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}
 
    {{ stage('Drop Table') }}
    DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}
 
    {{ stage('Drop View') }}
    DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}
 
    {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%}
    {{ stage('Suspend Root Task', true, "sql") }}
        ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName1}} SUSPEND
    {{ stage('Drop Current Task', true, "sql") }}
        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }}
    {%- else -%}
    {{ stage('Drop Current Task', true, "sql") }}
        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }}
    {%- endif -%}
 
{%- else -%}
 
    {{ stage('Task will be created once the Development Togggle is Disabled.') }}
    select 1 = 0
 
{% endif %}