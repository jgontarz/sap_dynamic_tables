{% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

{# Set Namespace Variables #}
    {% set nsVariables = namespace(taskWhenRun="") %}
    {% set nsVariables = namespace(partition="") %}
    {% set nsVariables = namespace(orderBy="") %}
    {% set nsVariables = namespace(rowNumber="") %}
    {% set nsVariables = namespace(tableKey=[]) %}
    {% set nsVariables = namespace(sortKey=[]) %}
    {% set nsVariables = namespace(tableKeySort=[]) %}
    {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}

    {# Source Object Location and Name #}
    {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
    {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
    {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
    {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
    {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

    {# Target Stream Location and Name #}
    {% set streamTargetLocationName = desiredState.node.location.name %}
    {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
    {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
    {% set streamName = desiredState.node.name + '_STREAM' %}
    {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
    {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}

    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
    {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
    {% set targetTableName = desiredState.node.name %}

    {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
    {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
    {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
    {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
    {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
    {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}

    {# Merge partition by and order by #}
    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}

    {% for i in desiredState.config.partitionBy.get('items') %}
        {%- if loop.first -%}
            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
        {% else %}
            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
        {%- endif -%}

        {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}

    {% endfor %}

    {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
        {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
        {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
        {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
        {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}

        {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
        {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
    {% else %}
        {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
        {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
        {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
        {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
        {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
        {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
        {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}

        {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
        {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
    {% endif %}

    {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}

    {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}

    {# Stream Type #}
    {% if desiredState.config.sourceType == 'Table' %} 
        {% set streamType = 'TABLE' %}
        {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
    {% elif desiredState.config.sourceType == 'External Table' %} 
        {% set streamType = 'EXTERNAL TABLE' %}
        {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
    {% else %} 
        {% set streamType = 'VIEW' %}
        {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
    {% endif %}

    {# DML Identifier Quoting #}
    {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
        {% set insertValue = desiredState.config.dmlInsert %}
        {% set deleteValue = desiredState.config.dmlDelete %}
        {% if desiredState.config.capUpdate == true %}
            {% set updateValue = desiredState.config.dmlUpdate %}
        {% endif %}
    {% else %}
        {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
        {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
        {% if desiredState.config.capUpdate == true %}
            {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
        {% endif %}
    {% endif %}

    {# Stream Append Behavior #}
    {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
        {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
        {% set changesClauseMode = 'CHANGES(information => default)' %}
        {% set updateStreamFilter = '' %}
        {% set insertStreamFilter = '(metadata$action = \'INSERT\' and metadata$isupdate = false)' %}
        {% if desiredState.config.capUpdate == true %}
            {% set updateStreamFilter = ' OR (metadata$action = \'INSERT\' and metadata$isupdate = true)' %}
        {% endif %}
        {% set deleteStreamFilter = ' OR (metadata$action = \'DELETE\' and metadata$isupdate = false)' %}
        {% set whereStreamFilter = 'WHERE (' + insertStreamFilter + updateStreamFilter + deleteStreamFilter + ')' %}
        {% set andStreamFilter = 'AND (' + insertStreamFilter + updateStreamFilter + deleteStreamFilter + ')' %}
        {% set identifyDefaultInsertRow = 'WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + insertValue + ' OR ' + insertStreamFilter + ' THEN ' + insertValue %}
        {% set identifyDefaultDeleteRow = ' WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + deleteValue + deleteStreamFilter + ' THEN ' + deleteValue %}
        {% set identifyDefaultUpdateRow = '' %}
        {% if desiredState.config.capUpdate == true %}
            {% set identifyDefaultUpdateRow = ' WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + updateValue + updateStreamFilter + ' THEN ' + updateValue %}
        {% endif %}

        {% set identifyDefaultStreamDeletedRow = 'CASE ' + identifyDefaultInsertRow + identifyDefaultDeleteRow + identifyDefaultUpdateRow + ' END' %}
        {% set identifyDefaultStreamDeletedRowLoadFlag = 'CASE WHEN (CASE ' + identifyDefaultInsertRow + identifyDefaultDeleteRow + identifyDefaultUpdateRow + ' END) = ' + deleteValue + ' THEN 1 ELSE 0 END' %}
    {% else %}
        {% set streamAppendMode = '' %}
    {% endif %}

    {# Stream Initial Row Behavior #}
    {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
        {% if desiredState.config.initialRows == true %} 
            {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
        {% else %} 
            {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
        {% endif %}
    {% else %}
        {% set streamInitialRowsMode = '' %}
    {% endif %}

    {# Stream Insert Only Behavior #}
    {% if streamType == 'EXTERNAL TABLE' %} 
        {% if desiredState.config.insertOnly == true %} 
            {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
        {% else %} 
            {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
        {% endif %}
    {% else %}
        {% set streamInsertOnlyMode = '' %}
    {% endif %}

    {# Hybrid View Info #}
    {# View created in same schema as Target Table #}
    {% set targetHybridViewDatabase = targetTableDatabase %} 
    {% set targetHybridViewSchema = targetTableSchema %} 
    {% set targetHybridViewName = desiredState.node.name  %}
    {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

    {# Task Info #}
    {% set taskName = desiredState.node.name + '_TASK'  %}
    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

    {# Task Type #}
    {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
        {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
    {%- else -%}
        {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
    {%- endif -%}

    {# Schedule Type #}
    {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
        {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
    {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
        {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
    {%- else -%}
        {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
        {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

        {%- for p in predecessorTasks -%}
            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
            {%- if not loop.last -%} 
                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
            {%- endif %}
        {% endfor %}    
    {%- endif -%}

    {# When Stream has data logic #}
    {%- if desiredState.config.flagSrcStream == true -%} 
        {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
    {%- endif -%}

    {{ stage('Create Stream') }}
    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
        ON {{ streamType }} {{ streamSourceObjectName }}
        {{ streamAppendMode }}
        {{ streamInitialRowsMode }}
        {{ streamInsertOnlyMode }}
        
    {{ stage('Create Target Table') }}
    CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
        (
        {%- for col in desiredState.columns %}
                "{{ col.name }}" {{ col.dataType }}
                {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
        )

    {% if desiredState.config.initialRows == true %}
        {{ stage('Target Table Initial Load') }}
        INSERT INTO {{ fullyQualifiedTargetTableName }}
        SELECT
        {%- for col in desiredState.columns %}
            "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
        FROM (SELECT {%- for col in desiredState.columns %}
                        {% if col.name == targetTableMergeUpdateColumn %}
                            {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                        {% else %}
                            "{{ col.name }}" as "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    {% if desiredState.config.softDeleteFlag == false %}
                        ,{{ identifyDefaultStreamDeletedRowLoadFlag }} as load_flag
                    {% endif %}
            FROM {{ fullyQualifiedStreamName }}
            QUALIFY {{ nsVariables.rowNumber }} = 1)
            {% if desiredState.config.softDeleteFlag == false %}
                WHERE load_flag = 1
            {% endif %}
    {% endif %}

    {{ stage('Create Hybrid View') }}
    CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
        {%- for col in desiredState.columns %}
            "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %} ) AS

    {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
        /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
        WITH delta AS 
        (
        SELECT {%- for col in desiredState.columns %}
                    {% if col.name == targetTableMergeUpdateColumn %}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn %}
                        {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}"
                    {% else %}
                        "{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ fullyQualifiedSourceTableName }}
        {{ changesClauseMode }}
        {{ changesClauseAt }}
        {{ whereStreamFilter }}
        QUALIFY {{ nsVariables.rowNumber }} = 1)

        SELECT {%- for col in desiredState.columns %}
                    "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} a
        WHERE NOT EXISTS (SELECT 1
                        FROM delta d
                        WHERE {%- for col in (nsVariables.partition).split(",") %}
                                    a.{{ col }} = d.{{ col }}
                                    {% if not loop.last -%}AND {% endif %}
                                {%- endfor %})
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                    "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM delta d

    {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
        /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
        WITH delta AS 
        (
        SELECT {%- for col in desiredState.columns %}
                    {% if col.name == targetTableMergeUpdateColumn %}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn %}
                        {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}"
                    {% else %}
                        "{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    , 
                {%- endfor %}
                    CASE WHEN {{ identifyDefaultStreamDeletedRow }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
        FROM {{ fullyQualifiedSourceTableName }}
        {{ changesClauseMode }}
        {{ changesClauseAt }}
        {{ whereStreamFilter }}
        QUALIFY {{ nsVariables.rowNumber }} = 1)

        SELECT {%- for col in desiredState.columns %}
                    "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} a
        WHERE NOT EXISTS (SELECT 1
                        FROM delta d
                        WHERE {%- for col in (nsVariables.partition).split(",") %}
                                    a.{{ col }} = d.{{ col }}
                                    {% if not loop.last -%}AND {% endif %}
                                {%- endfor %})
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                    "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM delta d
        WHERE LOAD_FLAG = 1

    {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
        /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
        WITH 
        a AS (
        SELECT {%- for col in desiredState.columns %}
                    {%- if col.name == targetTableMergeUpdateColumn -%}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn %}
                        {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                    {%- else -%}
                        "{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {%- endif -%}
            {%- endfor %}
        FROM {{ fullyQualifiedSourceTableName }}
        {{ changesClauseMode }}
        {{ changesClauseAt }}
        WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" != {{ deleteValue }}
        QUALIFY {{ nsVariables.rowNumber }} = 1),

        d AS (
        SELECT {%- for col in desiredState.columns %}
                    {%- if col.name == targetTableMergeUpdateColumn -%}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn %}
                        {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                    {%- else -%}
                        "{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {%- endif -%}
            {%- endfor %}
        FROM {{ fullyQualifiedSourceTableName }}
        {{ changesClauseMode }}
        {{ changesClauseAt }}
        WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" = {{ deleteValue }}
        QUALIFY {{ nsVariables.rowNumber }} = 1),

        ods_d as (
        SELECT {% for col in desiredState.columns -%}
                    {% if col.name == targetTableMergeUpdateColumn -%}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name in nsVariables.orderBy  -%} 
                        d."{{ col.name }}" as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn  -%} 
                        {{ deleteValue }} as "{{ col.name }}"
                    {% else -%}
                        a."{{ col.name }}" as "{{ col.name }}"
                    {% endif -%}
                    {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} a
        INNER JOIN (
                SELECT {%- for col in nsVariables.tableKeySort %}
                                "{{ col }}",
                        {%- endfor %}
                                {{ identifyDefaultStreamDeletedRow }} as "{{ col }}"
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
        ON 
        {% for col in nsVariables.tableKey %}
            a."{{col}}" = d."{{col}}"
            {%- if not loop.last -%} AND {% endif %}
            {%- if loop.last -%} ) {% endif %}
        {% endfor %}

        SELECT {%- for col in desiredState.columns %}
                    {% if col.name == targetTableMergeUpdateColumn %}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name in nsVariables.orderBy  %} 
                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn  %} 
                        coalesce(d."{{targetTableDmlIdentifierColumn}}_CALC", a."{{targetTableDmlIdentifierColumn}}_CALC") as "{{ col.name }}"
                    {% else %}
                        a."{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM a
        LEFT OUTER JOIN d
        ON 
            {%- for col in nsVariables.tableKey %}
                    a."{{ col }}" = d."{{ col }}" AND
            {%- endfor %}
            {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM ods_d
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} d
        WHERE NOT EXISTS (
            SELECT 1
            FROM {{ fullyQualifiedSourceTableName }}
            {{ changesClauseMode }}
            {{ changesClauseAt }} a
            WHERE 
            {%- for col in nsVariables.tableKey %}
                    a."{{ col }}" = d."{{ col }}"
                {%- if not loop.last -%} AND {% endif %}
            {%- endfor %}
            {{ andStreamFilter }})

    {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
        /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
        WITH 
        a AS (
        SELECT {%- for col in desiredState.columns %}
                    {%- if col.name == targetTableMergeUpdateColumn -%}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn %}
                        {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                    {%- else -%}
                        "{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {%- endif -%}
            {%- endfor %}
        FROM {{ fullyQualifiedSourceTableName }}
        {{ changesClauseMode }}
        {{ changesClauseAt }}
        WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" != {{ deleteValue }}
        QUALIFY {{ nsVariables.rowNumber }} = 1),

        d AS (
        SELECT {%- for col in desiredState.columns %}
                    {%- if col.name == targetTableMergeUpdateColumn -%}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn %}
                        {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                    {%- else -%}
                        "{{ col.name }}" as "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {%- endif -%}
            {%- endfor %}
        FROM {{ fullyQualifiedSourceTableName }}
        {{ changesClauseMode }}
        {{ changesClauseAt }}
        WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" = {{ deleteValue }}
        QUALIFY {{ nsVariables.rowNumber }} = 1),

        ods_d as (
        SELECT {% for col in desiredState.columns -%}
                    {% if col.name == targetTableMergeUpdateColumn -%}
                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                    {% elif col.name in nsVariables.orderBy  -%} 
                        d."{{ col.name }}" as "{{ col.name }}"
                    {% elif col.name == targetTableDmlIdentifierColumn  -%} 
                        {{ deleteValue }} as "{{ col.name }}"
                    {% else -%}
                        a."{{ col.name }}" as "{{ col.name }}"
                    {% endif -%}
                    {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} a
        INNER JOIN (
                SELECT {%- for col in nsVariables.tableKeySort %}
                                "{{ col }}",
                        {%- endfor %}
                                {{ identifyDefaultStreamDeletedRow }} as "{{ col }}"
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
        ON 
        {% for col in nsVariables.tableKey %}
            a."{{col}}" = d."{{col}}"
            {%- if not loop.last -%} AND {% endif %}
            {%- if loop.last -%} ) {% endif %}
        {% endfor %}

        SELECT 
        {%- for col in desiredState.columns %}
            "{{ col.name }}"
            {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
        FROM (
            SELECT {%- for col in desiredState.columns %}
                        {% if col.name == targetTableMergeUpdateColumn %}
                            {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                        {% elif col.name in nsVariables.orderBy  %} 
                            coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                        {% elif col.name == targetTableDmlIdentifierColumn  %} 
                            coalesce(d."{{ targetTableDmlIdentifierColumn }}_CALC", a."{{ targetTableDmlIdentifierColumn }}_CALC") as "{{ col.name }}"
                        {% else %}
                            a."{{ col.name }}" as "{{ col.name }}"
                        {% endif %}
                        , 
                {%- endfor %}
                        CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
            FROM a
            LEFT OUTER JOIN d
            ON 
                {%- for col in nsVariables.tableKey %}
                        a."{{ col }}" = d."{{ col }}" AND
                {%- endfor %}
                {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
        )
        WHERE LOAD_FLAG = 1
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM ods_d
        UNION ALL
        SELECT {%- for col in desiredState.columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
        FROM {{ fullyQualifiedTargetTableName }} d
        WHERE NOT EXISTS (
            SELECT 1
            FROM {{ fullyQualifiedSourceTableName }}
            {{ changesClauseMode }}
            {{ changesClauseAt }} a
            WHERE 
            {%- for col in nsVariables.tableKey %}
                    a."{{ col }}" = d."{{ col }}"
                {%- if not loop.last -%} AND {% endif %}
            {%- endfor %}
            {{ andStreamFilter }})

    {% endif %}

    {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
        {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
        {{ stage('Suspend Root Task', true, "sql") }}
        ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
    {%- endif -%}

    {{ stage('Create Task') }}
    CREATE OR REPLACE TASK 
        {{ fullyQualifiedTaskName }} 
        {{ taskType}} 
        {{ nsVariables.taskWhenRun }} 
        {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
    AS 
    MERGE INTO {{ fullyQualifiedTargetTableName }} a
    USING (SELECT
    {%- for col in desiredState.columns %}
                {% if col.name == targetTableMergeUpdateColumn %}
                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                {% else %}
                    "{{ col.name }}" as "{{ col.name }}"
                {% endif %}
                {%- if not loop.last -%}, {% endif %}
        {%- endfor %}
    FROM {{ fullyQualifiedStreamName }}
    {{ whereStreamFilter }}
    QUALIFY {{ nsVariables.rowNumber }} = 1) d
    ON 
    {% for col in nsVariables.tableKey %}
        a."{{col}}" = d."{{col}}"
        {%- if not loop.last -%} AND {% endif %}
    {% endfor %}

    WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
        {% for col in desiredState.columns %}
            a."{{ col.name }}"
            {% if not loop.last %}, {% endif -%}
        {%- endfor -%}
        )
    VALUES (
        {% for col in desiredState.columns %}
            d."{{ col.name }}"
            {% if not loop.last %}, {%- endif -%}
        {%- endfor -%}
        )
    {% if desiredState.config.capUpdate == true %}
        WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
            {% for col in desiredState.columns %}
                a."{{ col.name }}"
                {% if not loop.last %}, {% endif -%}
            {%- endfor -%}
            )
        VALUES (
            {% for col in desiredState.columns %}
                d."{{ col.name }}"
                {% if not loop.last %}, {%- endif -%}
            {%- endfor -%}
            )
    {% endif %}
    WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
        {% for col in desiredState.columns %}
            a."{{ col.name }}"
            {% if not loop.last %}, {% endif -%}
        {%- endfor -%}
        )
    VALUES (
        {% for col in desiredState.columns %}
            d."{{ col.name }}"
            {% if not loop.last %}, {%- endif -%}
        {%- endfor -%}
        )
    {% if desiredState.config.capUpdate == true %}
        /* Update DML value selected */
        WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
            {% for col in targetTableColumnNamesUpdate %}
                a."{{ col }}" = d."{{ col }}"
                {% if not loop.last %}, {% endif -%}
            {%- endfor -%}
    {% endif %}
    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
        {% for col in targetTableColumnNamesUpdate %}
            a."{{ col }}" = d."{{ col }}"
            {% if not loop.last %}, {% endif -%}
        {%- endfor -%}
    {% if desiredState.config.softDeleteFlag == true %}
        /* Soft Delete */
        WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
        THEN UPDATE SET
            {% for col in (targetTableColumnNamesUpdate) %}
                {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                    a."{{ col }}" = d."{{ col }}"
                    {% if not loop.last %}, {% endif -%}
                {% endif %}
            {%- endfor -%}
    {% else %}
        /* Hard Delete */
        WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
        THEN DELETE
    {% endif %}

    {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
        {{ stage('Resume Task', true, "sql") }}
        ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
    {%- endif -%}

{% elif currentState != undefined and desiredState == undefined %}

    {# Target Stream Location and Name #}
    {% set streamTargetLocationName = currentState.node.location.name %}
    {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
    {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
    {% set streamName = currentState.node.name + '_STREAM' %}
    {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
    {% set targetTableName = currentState.node.name %}

    {# Hybrid View Info #}
    {# View created in same schema as Target Table #}
    {% set targetHybridViewDatabase = targetTableDatabase %} 
    {% set targetHybridViewSchema = targetTableSchema %} 
    {% set targetHybridViewName = currentState.node.name  %}
    {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

    {# Task Info #}
    {% set taskName = currentState.node.name + '_TASK'  %}
    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

    {{ stage('Drop Stream') }}
    DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

    {{ stage('Drop Table') }}
    DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}

    {{ stage('Drop View') }}
    DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}

    {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
    {{ stage('Suspend Root Task', true, "sql") }}
        ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
    {{ stage('Drop Current Task', true, "sql") }}
        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
    {%- else -%}
    {{ stage('Drop Current Task', true, "sql") }}
        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
    {%- endif -%}

{%- else -%}

    {{ stage('Nothing to do.') }}
    select 1 = 0

{% endif %}
