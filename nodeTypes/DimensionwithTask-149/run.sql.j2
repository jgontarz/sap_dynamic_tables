{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Dimension With Task == #}
{# == Node Type Description    : This node loads data into dimension table == #}

{# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

{{ stage('Load Data - Development Mode') }}
{% if config.devMode == true %}
    {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

    {% if is_type_2 %}
        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
        USING (
        {% for source in sources %}
            /* New Rows That Don't Exist */
            {% if loop.first %}
            (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in columns if not col.isSurrogateKey %}
                {% if col.isSystemVersion %}
                    1
                {% elif col.isSystemCurrentFlag %}
                    'Y'
                {% else %}
                "RI"."{{ col.name }}"
                {% endif %}
                AS "{{ col.name }}",
            {% endfor %}
            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
            FROM (
            {% endif %}
            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns if not col.isSurrogateKey %}
                {% if col.isSystemVersion %}
                    1
                {% elif col.isSystemCurrentFlag %}
                    'Y'
                {% else %}
                {{ get_source_transform(col) }}
                {% endif %}
                AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
            {% endfor %}
            {{ source.join }}
            {% if not loop.last %}
                {{ config.insertStrategy }}
            {% endif %}
            {% if loop.last %}
                ) "RI"
            {% endif %}
        {% endfor %}
            LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
            {% for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                    "RI"."{{ col.name }}" = "DIM"."{{ col.name }}"
            {% endfor %}
            WHERE
            {% for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                "DIM"."{{ col.name }}" IS NULL
            {% endfor %}
            {% if config.groupByAll %}GROUP BY ALL{% endif %}
            {{ sortorder_by_colv() }})
            
            UNION ALL
            /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
        {% for source in sources %}
            {% if loop.first %}
            (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in columns if not col.isSurrogateKey %}
                {% if col.isSystemVersion %}
                    "DIM"."{{ col.name }}" + 1
                {% elif col.isSystemCurrentFlag %}
                    'Y'
                {% else %}
                "RIC"."{{ col.name }}"
                {% endif %}
                AS "{{ col.name }}",
            {% endfor %}
                'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
            FROM (
            {% endif %}
            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns if not (col.isSurrogateKey) -%}
                {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
            {% endfor %}
            {{ source.join }}
            {% if not loop.last %}
                {{ config.insertStrategy }}
            {% endif %}
            {% if loop.last %}
                ) "RIC"
            {% endif %}
        {% endfor %}
            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
            {% for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                    "RIC"."{{ col.name }}" = "DIM"."{{ col.name }}"
            {% endfor %}
            WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
            {% for col in columns if (col.isChangeTracking == true) %}
                {% if loop.first %}
                    AND (
                {% else %}
                    OR
                {% endif %}
                ( NVL( CAST("RIC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                {% if loop.last %}
                    )
                {% endif %}
            {% endfor %}
            {% if config.groupByAll %}GROUP BY ALL{% endif %}
            {{ sortorder_by_colv() }})
            UNION ALL
            /* Rows Needing To Be Expired Due To Type-2 Column Changes
            In this case, only two columns are merged (version and end date) */
        {% for source in sources %}
            {% if loop.first %}
            (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {%- for col in source.columns if not col.isSurrogateKey %}
                {% if col.isSystemEndDate %}
                    DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                {% elif col.isSystemCurrentFlag %}
                    'N'
                {% else %}
                    "DIM"."{{ col.name }}"
                {% endif %}
                AS "{{ col.name }}",
            {% endfor -%}
                'update_expired_version_rows' AS "DML_OPERATION"
            FROM (
            {% endif %}
            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns if not (col.isSurrogateKey or
                                                    col.isSystemVersion or
                                                    col.isSystemCurrentFlag or
                                                    col.isSystemStartDate or
                                                    col.isSystemEndDate or
                                                    col.isSystemUpdateDate or
                                                    col.isSystemCreateDate) -%}
                {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
            {% endfor %}
            {{ source.join }}
            {% if not loop.last %}
                {{ config.insertStrategy }}
            {% endif %}
            {% if loop.last %}
                ) "RIE"
            {% endif %}
        {% endfor %}
            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
            {% for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                "RIE"."{{ col.name }}" = "DIM"."{{ col.name }}"
            {% endfor %}
            WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
            {% for col in columns if (col.isChangeTracking == true) %}
                {% if loop.first %}
                    AND (
                {% else %}
                    OR
                {% endif %}
                ( NVL( CAST("RIE"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                {% if loop.last %}
                    )
                {% endif %}
            {% endfor %}
            {% if config.groupByAll %}GROUP BY ALL{% endif %}
            {{ sortorder_by_colv() }})

            UNION ALL
            /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
            This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
        {% for source in sources %}
            {% if loop.first %}
            (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {%- for col in columns if not col.isSurrogateKey %}
                {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                    "DIM"."{{ col.name }}"
                {% elif col.isSystemCurrentFlag %}
                    'Y'
                {% else %}
                    "RU"."{{ col.name }}"
                {% endif %}
                AS "{{ col.name }}",
            {% endfor -%}
                'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
            FROM (
            {% endif %}
            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {%- for col in source.columns if not col.isSurrogateKey %}
                {% if col.isSystemCurrentFlag %}
                    'Y'
                {% else %}
                    {{ get_source_transform(col) }}
                {% endif %}
                AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
            {% endfor -%}
            {{ source.join }}
            {% if not loop.last %}
               {{ config.insertStrategy }}
            {% endif %}
            {% if loop.last %}
                ) "RU"
            {% endif %}
        {% endfor %}
            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
            {% for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                "RU"."{{ col.name }}" = "DIM"."{{ col.name }}"
            {% endfor %}
            WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
            AND (
            {% for col in columns if (col.isChangeTracking) -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                "RU"."{{ col.name }}" = "DIM"."{{ col.name }}"
            {% endfor %} )
            {% for col in columns if not (   col.isBusinessKey or
                                                    col.isChangeTracking or
                                                    col.isSurrogateKey or
                                                    col.isSystemVersion or
                                                    col.isSystemCurrentFlag or
                                                    col.isSystemStartDate or
                                                    col.isSystemEndDate or
                                                    col.isSystemUpdateDate or
                                                    col.isSystemCreateDate) -%}
                {% if loop.first %}
                    AND (
                {% endif %}
                {% if not loop.first %}
                    OR
                {% endif %}
                NVL( CAST("RU"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                {% if loop.last %}
                    )
                {% endif %}
            {% endfor %}
            {% if config.groupByAll %}GROUP BY ALL{% endif %}
            {{ sortorder_by_colv() }})
        ) AS "SRC"
        ON
        {% for col in columns if col.isBusinessKey -%}
            {% if not loop.first %}
                AND
            {% endif %}
            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
        {% endfor %}
        AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
        WHEN MATCHED THEN UPDATE SET
        {%- for col in columns %}
            {% if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
            {% if not loop.last %}, {% endif %}
            {% endif %}
        {% endfor -%}
        WHEN NOT MATCHED THEN INSERT (
        {%- for col in columns if not col.isSurrogateKey %}
            "{{ col.name }}"
            {% if not loop.last %}, {% endif %}
        {% endfor -%}
        )
        VALUES (
        {%- for col in columns if not col.isSurrogateKey %}
            "SRC"."{{ col.name }}"
            {% if not loop.last %}, {% endif %}
        {% endfor -%}
        )

    {% else %}
        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
        USING (
        {% for source in sources %}
            /* Type 1 */
            {% if loop.first %}
            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in columns if not col.isSurrogateKey %}
                {% if col.isSystemVersion %}
                    1
                {% elif col.isSystemCurrentFlag %}
                    'Y'
                {% else %}
                "{{ col.name }}"
                {% endif %}
                AS "{{ col.name }}",
            {% endfor %}
            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
            FROM (
            {% endif %}
           (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns if not col.isSurrogateKey %}
                {% if col.isSystemVersion %}
                    1
                {% elif col.isSystemCurrentFlag %}
                    'Y'
                {% else %}
                {{ get_source_transform(col) }}
                {% endif %}
                AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
            {% endfor %}
            {{ source.join }}
            {% if config.groupByAll %}GROUP BY ALL{% endif %}
            {{ sortorder_by_colv() }})
            {% if not loop.last %}
                {{ config.insertStrategy }}
            {% endif %}
            {% if loop.last %}
                )) "SRC"
            {% endif %}
        {% endfor %}
            ON
            {% for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            {% endfor %}
            WHEN MATCHED
            {% for col in columns if not (   col.isBusinessKey or
                                                    col.isSurrogateKey or
                                                    col.isSystemVersion or
                                                    col.isSystemCurrentFlag or
                                                    col.isSystemStartDate or
                                                    col.isSystemEndDate or
                                                    col.isSystemUpdateDate or
                                                    col.isSystemCreateDate) %}
                {% if loop.first %}
                    AND (
                {% else %}
                    OR
                {% endif %}
                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                {% if loop.last %}
                    )
                {% endif %}
            {% endfor %}
            THEN UPDATE SET
            {%- for col in columns if not (  col.isBusinessKey or
                                                    col.isSurrogateKey or
                                                    col.isSystemVersion or
                                                    col.isSystemCurrentFlag or
                                                    col.isSystemStartDate or
                                                    col.isSystemEndDate or
                                                    col.isSystemCreateDate) %}
                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                {% if not loop.last %}, {% endif %}
            {% endfor %}
            WHEN NOT MATCHED THEN
            INSERT (
            {%- for col in columns if not col.isSurrogateKey %}
                "{{ col.name }}"
                {% if not loop.last %}, {% endif %}
            {% endfor -%}
            )
            VALUES (
            {%- for col in columns if not col.isSurrogateKey %}
                "SRC"."{{ col.name }}"
                {% if not loop.last %}, {% endif %}
            {% endfor -%}
            )
    {% endif %}
{% endif %}