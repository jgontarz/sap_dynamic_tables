{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Looped Load  == #}
{# == Node Type Description    : This node loads data a target stage table based on grouping information in group load table == #}

{# Source Object Location and Name #}

{% set sourceStorageLocation = sources[0].dependencies[0].node.location.name %}
{% set sourceDatabaseName = storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
{% set sourceSchemaName = storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
{% set sourceTableName = sources[0].dependencies[0].node.name %}
{% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

{# Target Load Group Table Name #}
{% if config.dedicatedLoadHistoryTable  %}
      {% set tableGroupLoadName = node.name + '_TABLE_GROUP_LOAD' %}
{% else %}
      {% set tableGroupLoadName = 'TABLE_GROUP_LOAD' %}
{% endif %}

{# Target Load Group Table Location #}
{% if config.loadHistoryTableLocation == 'Same as Target Table'  %}
      {% set tableGroupLoadTargetLocationName = node.location.name %}
{% else %}
      {% set tableGroupLoadTargetLocationName = parameters.utilitySchema %}
{% endif %}

{% set tableGroupLoadTargetDatabaseName = storageLocations | selectattr('name', 'equalto', tableGroupLoadTargetLocationName) | map(attribute='database') | first %}
{% set tableGroupLoadTargetSchemaName = storageLocations | selectattr('name', 'equalto', tableGroupLoadTargetLocationName) | map(attribute='schema') | first %}
{% set fullyQualifiedtableGroupLoadName = '"' + tableGroupLoadTargetDatabaseName + '"."' + tableGroupLoadTargetSchemaName + '"."' + tableGroupLoadName + '"' %}

{# Target table load #}
{% set fullyQualifiedTargetTableName = ref_no_link(node.location.name, node.name) %}

{% set bucketByItemCount = config.bucketBy.get('items') | count %}
{%- set sourceTableName = sources[0].dependencies[0].node.name -%}

{%- set nsVariables = namespace(partition="", datatype="", partitionColumns="", partitionColumnsConcat="", tableKeyObjectConstruct="", loadWhereClause="", sortColumns="", columnNameList="", columnTransformList="", nullIncrementalValue="") -%}

{# Incremental variables #}
{% set incremetnalFitlerColumn = "" %}
{% set incremetnalFitlerColumnQuoted = "" %}
{% set incremetnalFitlerDatatype = "" %}
{% if (parameters.loadType == 'Incremental Load') or (parameters.loadType == 'Reprocess Load' and config.setIncrementalLoadOptions == true) %}
      {% set incremetnalFitlerColumn = config.incrementalLoadColumn.name %}
      {% set incremetnalFitlerColumnQuoted = '"' + incremetnalFitlerColumn + '"' %}
      {% set incremetnalFitlerDatatype = config.incrementalLoadColumn.dataType %}

      {% if ((incremetnalFitlerDatatype in ('FLOAT','BOOLEAN')) or (incremetnalFitlerDatatype[:6] == 'NUMBER')) %}
            {% set nsVariables.nullIncrementalValue = '-1::' + incremetnalFitlerDatatype %}
      {% elif (incremetnalFitlerDatatype[:9] == 'TIMESTAMP' or incremetnalFitlerDatatype[:4] == 'DATE') %}
            {% set nsVariables.nullIncrementalValue = '\'' + '1900-01-01' + '\'' + '::' + incremetnalFitlerDatatype %}
      {% else %}
            {{ stage('Incremental Load Type Error') }}
            /* Incremental load column must be a timestamp or numeric datatype. */
      {% endif %}
{% endif %}

{% if config.groupingType == 'Range Buckets' %}
      {%- set colName = config.bucketBy.get('items')[0].buckeyByColumn.name -%}
      {%- set colNameQuote = '"' + config.bucketBy.get('items')[0].buckeyByColumn.name + '"' -%}
      {%- set dataType = config.bucketBy.get('items')[0].buckeyByColumn.dataType -%}
      {%- set nsVariables.partition = '"' + colName + '"' -%}
      {%- set nsVariables.partitionColumns = colNameQuote -%}
      {%- set nsVariables.datatype = dataType -%}

      {% if (parameters.loadType in ('Full Reload','Full Load')) or (parameters.loadType == 'Reprocess Load' and config.setIncrementalLoadOptions == false) %}
            {%- set nsVariables.loadWhereClause = 'WHERE ' + colName + ' between ' + '\'\'\'' + ' || row_data:"bucketStart"::' + dataType + ' || \'\'\'\'' + ' || \'' + ' AND ' + '\'\'\'' + ' || row_data:"bucketEnd"::' + dataType + ' || \'\'\''-%}
      {% elif (parameters.loadType == 'Incremental Load') or (parameters.loadType == 'Reprocess Load' and config.setIncrementalLoadOptions == true) %}
            {%- set nsVariables.loadWhereClause = 'WHERE ' + incremetnalFitlerColumnQuoted + ' > ' + '\'\'\'' + ' || row_data:"GROUP_LAST_LOAD"::' + incremetnalFitlerDatatype + ' || \'\'\'\'' + ' ||\' ' + ' AND ' + colName + ' between ' + '\'\'\'' + ' || row_data:"bucketStart"::' + dataType + ' || \'\'\'\'' + ' || \'' + ' AND ' + '\'\'\'' + ' || row_data:"bucketEnd"::' + dataType + ' || \'\'\''-%}

            {% set groupLastLoad = 'NVL('+ incremetnalFitlerColumnQuoted +',' + nsVariables.nullIncrementalValue +') as "GROUP_LAST_LOAD",' %}

      {% else %}
            {{ stage('Incremental Load Type Error') }}
            /* Incorrect incremental load type parameter option selected. */
      {% endif %}

{% elif config.groupingType == 'Key Based' %}
      {%- for i in config.bucketBy.get('items') -%}
            {%- set colName = i.buckeyByColumn.name -%}
            {%- set colNameQuote = '"' + i.buckeyByColumn.name + '"' -%}
            {%- set dataType = i.buckeyByColumn.dataType -%}
            {%- if loop.first -%}
                  {%- set nsVariables.partition = colName -%}
                  {%- set nsVariables.partitionColumns = colNameQuote -%}
                  {%- set nsVariables.datatype = dataType -%}

                  {% if parameters.loadType in ('Full Reload','Full Load') or (parameters.loadType == 'Reprocess Load' and config.setIncrementalLoadOptions == false) %}
                        {%- set nsVariables.tableKeyObjectConstruct = '\'' + colName + '\'' + ',' + colNameQuote -%}
                        {%- set nsVariables.loadWhereClause = 'WHERE ' + colNameQuote + ' = ' + '\'\'\'' + ' || row_data:' + colNameQuote + '::' + dataType + ' || \'\'\''-%}
                  {% elif parameters.loadType == 'Incremental Load' or (parameters.loadType == 'Reprocess Load' and config.setIncrementalLoadOptions == true) %}
                        {%- set nsVariables.tableKeyObjectConstruct = '\'' + 'GROUP_LAST_LOAD' + '\'' + ', NVL(MAX("TGT"."GROUP_LAST_LOAD"),' + nsVariables.nullIncrementalValue + ')' + ',\'' + colName + '\'' + ',' + colNameQuote -%}
                        {%- set nsVariables.loadWhereClause = 'WHERE ' + incremetnalFitlerColumnQuoted + ' > ' + '\'\'\'' + ' || row_data:"GROUP_LAST_LOAD"::' + incremetnalFitlerDatatype + ' || \'\'\'\'' + ' || \' ' + 'AND ' + colNameQuote + ' = ' + '\'\'\'' + ' || row_data:' + colNameQuote + '::' + dataType + ' || \'\'\''-%}
                  {% else %}
                        {{ stage('Load Type Parameter Error') }}
                        /* Incorrect loadType parameter value selected options selected. */
                  {% endif %}

                  {% if not loop.last %}
                        {%- set nsVariables.loadWhereClause = nsVariables.loadWhereClause + '\'' -%}
                  {% endif %}
            {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ', ' + colNameQuote  -%}
                  {%- set nsVariables.partitionColumns = nsVariables.partitionColumns + ' || ' + colNameQuote  -%}
                  {%- set nsVariables.datatype = nsVariables.datatype + ', ' + dataType %}
                  {%- set nsVariables.tableKeyObjectConstruct = nsVariables.tableKeyObjectConstruct + ', ' + '\'' + colName + '\'' + ',' + colNameQuote %}
                  {%- set nsVariables.loadWhereClause = nsVariables.loadWhereClause + ' || \'' + ' AND ' + colNameQuote + ' = ' + '\'\'\'' + ' || row_data:' + colNameQuote + '::' + dataType + ' || \'\'\''-%}
                  {% if not loop.last %}
                        {%- set nsVariables.loadWhereClause = nsVariables.loadWhereClause + '\'' -%}
                  {% endif %}
            {%- endif -%}
      {%- endfor -%}
{% else %}
      {{ stage('Grouping Type Error') }}
      /* Incorrect grouping type options selected. */
{% endif %}

{% if config.sortDataOnLoad %}
      {%- for i in config.sortBy.get('items') -%}
            {%- set colName = i.sortByColumn.name -%}
            {%- set sortOrder = i.sortOrder -%}
            {%- if loop.first -%}
                  {%- set nsVariables.sortColumns = ' ORDER BY "' + colName + '" ' + sortOrder -%}
            {%- else -%}
                  {%- set nsVariables.sortColumns = nsVariables.sortColumns + ', "' + colName + '" ' + sortOrder -%}
            {% endif %}
      {% endfor %}
{% endif %}

{% for col in columns %}
      {% set columnId = col.id %}
      {% set columnName = '"' + col.name + '"' %}
      {% set columnTransform = sources[0].columns | selectattr('id','equalto',columnId) | map(attribute='transform') | first %}

      {% if columnTransform | length == 0 %}
            {% set columnTransform = columnName %}
      {% endif %}

      {% if loop.first %}
            {% set nsVariables.columnNameList = columnName %}
            {% set nsVariables.columnTransformList = columnTransform %}
      {% else %}
            {% set nsVariables.columnNameList = nsVariables.columnNameList + ',' + columnName %}
            {% set nsVariables.columnTransformList = nsVariables.columnTransformList + ',' + columnTransform %}
      {% endif %}
{% endfor %}

{% set incrementalWhereFilter = "" %}
{% set incrementalSelect = 'null' %}
{% if parameters.loadType == 'Incremental Load' %}
      {% if config.groupingType == 'Key Based' %}
            {% set incrementalWhereFilter = 'LEFT JOIN (SELECT ' + nsVariables.partitionColumns + ' AS "PARTITION_COLUMN", NVL(MAX("' + incremetnalFitlerColumn + '"),' + nsVariables.nullIncrementalValue + ') AS "GROUP_LAST_LOAD" FROM ' + fullyQualifiedTargetTableName + ' GROUP BY "PARTITION_COLUMN") "TGT"  ON partition_cols = "TGT"."PARTITION_COLUMN" WHERE ("TGT"."GROUP_LAST_LOAD" is null OR "' + incremetnalFitlerColumn + '" > "TGT"."GROUP_LAST_LOAD")' %}
            {% set incrementalSelect = '(SELECT NVL(MAX("' + incremetnalFitlerColumn + '"),' + nsVariables.nullIncrementalValue + ') AS "GROUP_LAST_LOAD" FROM ' + fullyQualifiedTargetTableName + ')' %}
      {% elif config.groupingType == 'Range Buckets' %}
            {% set incrementalWhereFilter = 'WHERE ' + incremetnalFitlerColumnQuoted + ' > (SELECT NVL(MAX("' + incremetnalFitlerColumn + '"),' + nsVariables.nullIncrementalValue + ') AS "GROUP_LAST_LOAD" FROM ' + fullyQualifiedTargetTableName + ')' %}
            {% set incrementalSelect = '(SELECT NVL(MAX("' + incremetnalFitlerColumn + '"),' + nsVariables.nullIncrementalValue + ') AS "GROUP_LAST_LOAD" FROM ' + fullyQualifiedTargetTableName + ')' %}
      {% else %}
            {{ stage('Grouping Type Load Error') }}
            /* Incorrect Grouping Type options selected. */
      {% endif %}
{% elif parameters.loadType == 'Full Reload' %}
      {{ stage('Truncate Table for Full Reload') }}
      TRUNCATE TABLE {{ fullyQualifiedTargetTableName }};

      {{ stage('Update ') }}
      UPDATE {{ fullyQualifiedtableGroupLoadName }}
      SET "PROCESS_STATUS" = 2, "PROCESS_STATUS_DESCRIPTION" = 'IGNORE_FULL_RELOAD'
      WHERE "SOURCE_TABLE" = '{{ fullyQualifiedSourceTableName }}'
      AND   "TARGET_TABLE" = '{{ fullyQualifiedTargetTableName }}'
      AND   "PROCESS_STATUS" = -1;

{% endif %}

{% if parameters.loadType != 'Reprocess Load' %}
      {% set bucketType = config.groupingType %}
      {% if config.groupingType == 'Range Buckets' %}
            {% if bucketByItemCount != 1 %}
                  {{ stage('Invalid configuration selection.') }}
                  /* If grouping by date only one column may be selected. */
            {% else %}

                  {% if parameters.loadType == 'Incremental Load' and config.groupIncremental == 'false' %}
                        {% set manualGrouping = 1 %}
                  {% else %}
                        {% set manualGrouping = config.groupCount %}
                  {% endif %}

                  {{ stage('Insert Range Buckets Load Group Data') }}
                  insert into {{ fullyQualifiedtableGroupLoadName }}
                  with load_identifier as (select uuid_string() as load_uuid),
                  raw as (
                  select bucket,
                        '{{ nsVariables.partition }}' as bucket_column,
                        '{{ nsVariables.datatype }}' as bucket_column_datatype,
                        min(partition_column) as bucket_start,
                        max(partition_column) as bucket_end,
                        max(group_last_load) as group_last_load,
                        sum(row_count) as bucket_rows
                  from (select {{ nsVariables.partition }} as partition_column,
                              {{ incrementalSelect }} as group_last_load,
                              count({{ nsVariables.partition }}) as row_count,
                              sum(row_count) over (order by {{ nsVariables.partition }} asc) as running_total,
                              sum(row_count) over (partition by 1) as total_rows,
                              ceil((cast(running_total as float) / cast(total_rows as float) * 100) / cast((100 / {{ manualGrouping }}) as float), 0) as bucket
                        from {{ fullyQualifiedSourceTableName }}
                        {{ incrementalWhereFilter }}
                        group by group_last_load, partition_column
                        order by partition_column asc)
                  group by bucket
                  order by bucket asc)

                  select load_identifier.load_uuid as load_uuid,
                         uuid_string() as group_uuid,
                         '{{ fullyQualifiedSourceTableName }}' as source_table,
                         '{{ fullyQualifiedTargetTableName }}' as target_table,
                         '{{ bucketType }}',
                         '{{ parameters.loadType }}',
                         bucket,
                         object_construct('GROUP_LAST_LOAD', group_last_load,
                                          'column', bucket_column, 
                                          'datatype', bucket_column_datatype,
                                          'bucketStart', bucket_start,
                                          'bucketEnd', bucket_end) as bucket_definition,
                         bucket_rows,
                         -1 as process_status,
                         'RECORD_CREATED' as process_status_description,
                         current_timestamp::timestamp_ntz as record_creation_time,
                         null as record_process_status
                  from raw, load_identifier
                  order by bucket_start asc
            {% endif %}
      {% elif config.groupingType == 'Key Based' %}
            {{ stage('Insert Key Based Load Group Data') }}
            insert into {{ fullyQualifiedtableGroupLoadName }}
            with load_identifier as (select uuid_string() as load_uuid),
            raw as (
            select bucket,
                  bucket_definition,
                  min(partition_cols) as bucket_start,
                  max(partition_cols) as bucket_end,
                  sum(row_count) as bucket_rows
            from (select {{ nsVariables.partitionColumns }} as partition_cols,
                        count({{ nsVariables.partitionColumns }}) as row_count,
                        object_construct({{ nsVariables.tableKeyObjectConstruct }}) as bucket_definition,
                        sum(row_count) over (order by {{ nsVariables.partitionColumns }} asc) as running_total,
                        sum(row_count) over (partition by 1) as total_rows,
                        row_number() over (partition by 1 order by {{ nsVariables.partitionColumns }} asc) as bucket
                  from {{ fullyQualifiedSourceTableName }}
                  {{ incrementalWhereFilter }}
                  group by {{ nsVariables.partition }}
                  order by partition_cols asc)
            group by bucket, bucket_definition
            order by bucket asc)

      select load_identifier.load_uuid as load_uuid,
                  uuid_string() as group_uuid,
                  '{{ fullyQualifiedSourceTableName }}' as source_table,
                  '{{ fullyQualifiedTargetTableName }}' as target_table,
                  '{{ parameters.loadType }}',
                  '{{ bucketType }}',
                  bucket,
                  bucket_definition,
                  bucket_rows,
                  -1 as process_status,
                  'RECORD_CREATED' as process_status_description,
                  current_timestamp::timestamp_ntz as record_creation_time,
                  null as record_process_status
            from raw, load_identifier
            order by bucket_start asc

      {% endif %}
{% endif %}

{% for test in node.tests if config.testsEnabled %}
      {% if test.runOrder == 'Before' %}
      {{ test_stage(test.name, test.continueOnFailure) }}
      {{ test.templateString }}
      {% endif %}
{% endfor %}

{% if config.preSQL %}
      {{ stage('Pre-SQL') }}
      {{ config.preSQL }}
{% endif %}
	
{{ stage( 'Looped Insert SQL Script') }}
-- Anonymous stored procedure block
DECLARE
  -- Variables
  row_data VARIANT;
  source_query STRING;
  target_table STRING;
  table_group_load_update_processing STRING;
  table_group_load_update_error STRING;
  table_group_load_update_complete STRING;
  counter INTEGER DEFAULT 0;

  -- Cursor to loop through each row in GROUP_LOAD table
  res RESULTSET;
  select_statement STRING := 
    'SELECT * 
     FROM {{ fullyQualifiedtableGroupLoadName }}
     WHERE "TARGET_TABLE" = ''{{ fullyQualifiedTargetTableName }}''
     AND "PROCESS_STATUS" = -1
     ORDER BY "RECORD_CREATION_TIME" ASC, "BUCKET" ASC';

BEGIN
  -- Execute the SELECT statement and store the result set
  res := (EXECUTE IMMEDIATE :select_statement);
  LET cur CURSOR FOR res;

  -- Loop through each row in the result set
  FOR record IN cur DO
    -- Set the target table
    target_table := record.TARGET_TABLE;

    -- Extract BUCKET_DEFINITION from the current row
    row_data := record.BUCKET_DEFINITION;

    -- Build the dynamic SQL query to select data from the source table
    source_query := 'SELECT {{ nsVariables.columnTransformList }} FROM {{ fullyQualifiedSourceTableName }} {{ nsVariables.loadWhereClause }}{{ nsVariables.sortColumns }}';

    -- Build the dynamic SQL query to update processing status of the current group
    table_group_load_update_processing := 
      'UPDATE {{ fullyQualifiedtableGroupLoadName }} 
      SET "PROCESS_STATUS" = 0, "PROCESS_STATUS_DESCRIPTION" = ''RECORD_GROUP_PROCESSING'', "RECORD_PROCESS_TIME" = current_timestamp 
      WHERE "GROUP_UUID" = ''' || record.GROUP_UUID || '''
      AND "LOAD_UUID" = ''' || record.LOAD_UUID || '''';

    -- Update processing status prior to the load
    EXECUTE IMMEDIATE table_group_load_update_processing;

    -- Build the dynamic SQL query to update processing status of the current group to -1 in case of failure
    table_group_load_update_error := 
      'UPDATE {{ fullyQualifiedtableGroupLoadName }} 
      SET "PROCESS_STATUS" = -1, "PROCESS_STATUS_DESCRIPTION" = ''LOAD_FAILED'', "RECORD_PROCESS_TIME" = current_timestamp 
      WHERE "GROUP_UUID" = ''' || record.GROUP_UUID || '''
      AND "LOAD_UUID" = ''' || record.LOAD_UUID || '''';

    -- Execute the dynamic SQL query and insert into the target table
    EXECUTE IMMEDIATE 'INSERT INTO {{ fullyQualifiedTargetTableName }} ({{ nsVariables.columnNameList }})'  || source_query;

    -- Build the dynamic SQL query to update processing status of the current group
    table_group_load_update_complete := 
      'UPDATE {{ fullyQualifiedtableGroupLoadName }} 
      SET "PROCESS_STATUS" = 1, "PROCESS_STATUS_DESCRIPTION" = ''LOAD_COMPLETE'', "RECORD_PROCESS_TIME" = current_timestamp 
      WHERE "GROUP_UUID" = ''' || record.GROUP_UUID || '''
      AND "LOAD_UUID" = ''' || record.LOAD_UUID || '''';

    -- Update processing status after the load
    EXECUTE IMMEDIATE table_group_load_update_complete;

    counter := counter + 1;
  END FOR;

  -- Return a message indicating completion
  RETURN 'Loaded ' || counter || ' groups.';

EXCEPTION
  WHEN OTHER THEN
    EXECUTE IMMEDIATE table_group_load_update_error;

    RETURN OBJECT_CONSTRUCT('Error type', 'Other error',
                            'SQLCODE', sqlcode,
                            'SQLERRM', sqlerrm,
                            'SQLSTATE', sqlstate);

END;

{% if config.postSQL %}
      {{ stage('Post-SQL') }}
      {{ config.postSQL }}
{% endif %}

{% if config.testsEnabled %}
	{% for test in node.tests %}
		{% if test.runOrder == 'After' %}
			{{ test_stage(test.name, test.continueOnFailure) }}
			{{ test.templateString }}
        {% endif %}
	{% endfor %}

	{% for column in columns %}
		{% for test in column.tests %}
			{{ test_stage(column.name + ": " + test.name) }}
			{{ test.templateString }}
		{% endfor %}
	{% endfor %}
{% endif %}
