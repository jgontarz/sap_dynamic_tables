{% set spName = node.name %}
{% set spStrLoc = config.spLocation %}
{% set spDb = storageLocations | selectattr('name', 'equalto', spStrLoc) | map(attribute='database') | first %}
{% set spSch = storageLocations | selectattr('name', 'equalto', spStrLoc) | map(attribute='schema') | first %}
{% set spName = node.name %}

{% set fqSpName = '"' + spDb + '"."' + spSch + '"."' + spName + '"' %}

{{ stage('Create Python Parse Excel SP') }}
CREATE OR REPLACE PROCEDURE {{ fqSpName }} (source_file_path string, target_table_name string)
RETURNS VARIANT
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('snowflake-snowpark-python', 'pandas', 'openpyxl')
HANDLER = 'main'
AS
$$
from snowflake.snowpark.files import SnowflakeFile
from openpyxl import load_workbook
from snowflake.snowpark.functions import parse_json, col
import pandas as pd
 
def main(session, source_file_path, target_table_name):
 with SnowflakeFile.open(source_file_path, 'rb') as f:
     workbook = load_workbook(f)
     sheet = workbook.active
     data = sheet.values
 
     # Get the first line in file as a header line
     columns = next(data)[0:]
     # Create a DataFrame based on the second and subsequent lines of data
     df = pd.DataFrame(data, columns=columns)
     
     json = df.to_json(orient="records")
     
     df1 = session.create_dataframe([json]).to_df("src")
     df2 = df1.select(parse_json(col("src")).as_('src'))
     df2.write.mode("overwrite").saveAsTable(target_table_name)
 
 return True
$$;