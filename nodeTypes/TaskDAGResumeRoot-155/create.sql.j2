{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Task DAG Resume Root == #}
{# == Node Type Description    : This node resumes the root task and its dependents or child tasks== #}


{% if desiredState %}

    {# Task Info #}
    {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %} 
    {% set targetNodeDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
    {% set targetNodeSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
    {%- set fqRootTaskName = targetNodeDatabase + '.' + targetNodeSchema + '.' + desiredState.config.rootTask -%} 

    {% set refLinkPred = "{{ ref('" + sourceStorageLocation + "', '" + desiredState.sources[0].dependencies[0].node.name + "') }}" %}

    {{ stage('Try Enable Root Task', true, "sql", "create") }}
    begin
    
        let sqlDml1 := 'select system$task_dependents_enable(''{{refLinkPred}}'')';

        let sqlDml2 := 'select system$task_dependents_enable(''{{fqRootTaskName}}'')';
        
        execute immediate sqlDml2;
        
        return 'Task resumed';
            exception
            when statement_error then
                return 'Task already running';
    end;

{% endif %}